{"version":3,"sources":["components/Workbench/GojsExtensions/LocalStorageCommandHandler.js"],"names":["LocalStorageCommandHandler","go","call","this","StorageKey","FormatKey","inherit","prototype","copyToClipboard","coll","window","localStorage","setItem","clipdiag","isTreePathToChildren","diagram","toolManager","draggingTool","dragsLink","model","copy","copyParts","toJson","dataFormat","ex","pasteFromClipboard","clipstr","getItem","clipfrmt","fromJson","all","addAll","parts","nodes","links","copymap","iteratorValues","canPasteSelection","pos","isReadOnly","isModelReadOnly","allowInsert","allowClipboard"],"mappings":"kHAAA,kBAwCA,SAASA,IACPC,iBAAkBC,KAAKC,MACvBA,KAAKC,WAAa,gBAClBD,KAAKE,UAAY,sBAEnBJ,UAAWK,QAAQN,EAA4BC,kBAM/CD,EAA2BO,UAAUC,gBAAkB,SAASC,GAC9D,IACE,GAAa,OAATA,EACFC,OAAOC,aAAaC,QAAQT,KAAKC,WAAY,IAC7CM,OAAOC,aAAaC,QAAQT,KAAKE,UAAW,QACvC,CACL,IAAIQ,EAAW,IAAIZ,UAEnBY,EAASC,qBAAuBX,KAAKY,QAAQD,qBAC7CD,EAASG,YAAYC,aAAaC,UAAYf,KAAKY,QAAQC,YAAYC,aAAaC,UAEpFL,EAASM,MAAQhB,KAAKY,QAAQI,MAAMC,OAEpCjB,KAAKY,QAAQM,UAAUZ,EAAMI,GAAU,GAEvCH,OAAOC,aAAaC,QAAQT,KAAKC,WAAYS,EAASM,MAAMG,UAC5DZ,OAAOC,aAAaC,QAAQT,KAAKE,UAAWQ,EAASM,MAAMI,aAE7D,MAAOC,GAEPvB,iBAAkBM,UAAUC,gBAAgBN,KAAKC,KAAMM,KAQ3DT,EAA2BO,UAAUkB,mBAAqB,WACxD,IAAIhB,EAAO,IAAIR,MACf,IACE,IAAIyB,EAAUhB,OAAOC,aAAagB,QAAQxB,KAAKC,YAC3CwB,EAAWlB,OAAOC,aAAagB,QAAQxB,KAAKE,WAChD,GAAgB,OAAZqB,GAAgC,KAAZA,GAAkBE,IAAazB,KAAKY,QAAQI,MAAMI,WACxE,OAAOd,EAEP,IAAII,EAAW,IAAIZ,UAEnBY,EAASM,MAAQlB,QAAS4B,SAASH,GAEnC,IAAII,GAAM,IAAI7B,QAAU8B,OAAOlB,EAASmB,OAAOD,OAAOlB,EAASoB,OAAOF,OAAOlB,EAASqB,OAClFC,EAAUhC,KAAKY,QAAQM,UAAUS,EAAK3B,KAAKY,SAAS,GAExD,OAAO,IAAId,OAAoB8B,OAAOI,EAAQC,gBAEhD,MAAOZ,GAEP,OAAOvB,iBAAkBM,UAAUkB,mBAAmBvB,KAAKC,QAS/DH,EAA2BO,UAAU8B,kBAAoB,SAASC,GAChE,IAAIvB,EAAUZ,KAAKY,QACnB,GAAgB,OAAZA,GAAoBA,EAAQwB,YAAcxB,EAAQyB,gBAAiB,OAAO,EAC9E,IAAKzB,EAAQ0B,cAAgB1B,EAAQ2B,eAAgB,OAAO,EAC5D,IACE,IAAIhB,EAAUhB,OAAOC,aAAagB,QAAQxB,KAAKC,YAC3CwB,EAAWlB,OAAOC,aAAagB,QAAQxB,KAAKE,WAChD,OAAgB,OAAZqB,GAAgC,KAAZA,GACpBE,IAAab,EAAQI,MAAMI,WAE/B,MAAOC,GAEP,OAAOvB,iBAAkBM,UAAU8B,kBAAkBC,KAI1CtC","file":"static/js/3.5e0cc2fe.chunk.js","sourcesContent":["\"use strict\";\r\n/*\r\n*  Copyright (C) 1998-2020 by Northwoods Software Corporation. All Rights Reserved.\r\n*/\r\n\r\n/*\r\n* This is an extension and not part of the main GoJS library.\r\n* Note that the API for this class may change with any version, even point releases.\r\n* If you intend to use an extension in production, you should copy the code to your own source directory.\r\n* Extensions can be found in the GoJS kit under the extensions or extensionsTS folders.\r\n* See the Extensions intro page (https://gojs.net/latest/intro/extensions.html) for more information.\r\n*/\r\n\r\n/**\r\n* @constructor\r\n* @extends CommandHandler\r\n* @class\r\n* This CommandHandler class uses localStorage as the repository for the clipboard,\r\n* rather than an in-memory global variable.\r\n* It requires that the {@link Diagram#model} be serializable and deserializable using {@link Model#toJson} and {@link Model.fromJson}.\r\n* <p>\r\n* The {@link #copyToClipboard} and {@link #pasteFromClipboard} functions fall back to using the standard definitions\r\n* if there are any errors calling <code>Storage.getItem</code> or <code>Storage.setItem</code>.\r\n* <p>\r\n* Typical usage:\r\n* <pre>\r\n*   $(go.Diagram, \"myDiagramDiv\",\r\n*     {\r\n*       commandHandler: $(LocalStorageCommandHandler),\r\n*       . . .\r\n*     }\r\n*   )\r\n* </pre>\r\n* or:\r\n* <pre>\r\n*    myDiagram.commandHandler = new LocalStorageCommandHandler();\r\n* </pre>\r\n*/\r\nimport * as go from 'gojs';\r\n\r\nfunction LocalStorageCommandHandler() {\r\n  go.CommandHandler.call(this);\r\n  this.StorageKey = \"go._clipboard\";\r\n  this.FormatKey = \"go._clipboardFormat\";\r\n}\r\ngo.Diagram.inherit(LocalStorageCommandHandler, go.CommandHandler);\r\n\r\n/**\r\n* @this {LocalStorageCommandHandler}\r\n* @param {Iterable.<Part>} coll a collection of {@link Part}s.\r\n*/\r\nLocalStorageCommandHandler.prototype.copyToClipboard = function(coll) {\r\n  try {\r\n    if (coll === null) {\r\n      window.localStorage.setItem(this.StorageKey, \"\");\r\n      window.localStorage.setItem(this.FormatKey, \"\");\r\n    } else {\r\n      var clipdiag = new go.Diagram();  // create a temporary Diagram\r\n      // copy from this diagram to the temporary diagram some properties that affects copying:\r\n      clipdiag.isTreePathToChildren = this.diagram.isTreePathToChildren;\r\n      clipdiag.toolManager.draggingTool.dragsLink = this.diagram.toolManager.draggingTool.dragsLink;\r\n      // create a model like this one but with no data\r\n      clipdiag.model = this.diagram.model.copy();\r\n      // copy the given Parts into this temporary Diagram\r\n      this.diagram.copyParts(coll, clipdiag, false);\r\n\r\n      window.localStorage.setItem(this.StorageKey, clipdiag.model.toJson());\r\n      window.localStorage.setItem(this.FormatKey, clipdiag.model.dataFormat);\r\n    }\r\n  } catch (ex) {\r\n    // fallback implementation\r\n    go.CommandHandler.prototype.copyToClipboard.call(this, coll);\r\n  }\r\n};\r\n\r\n/**\r\n* @this {LocalStorageCommandHandler}\r\n* @return {Set.<Part>} a collection of newly pasted {@link Part}s\r\n*/\r\nLocalStorageCommandHandler.prototype.pasteFromClipboard = function() {\r\n  var coll = new go.Set(/*go.Part*/);\r\n  try {\r\n    var clipstr = window.localStorage.getItem(this.StorageKey);\r\n    var clipfrmt = window.localStorage.getItem(this.FormatKey);\r\n    if (clipstr === null || clipstr === \"\" || clipfrmt !== this.diagram.model.dataFormat) {\r\n      return coll;\r\n    } else {\r\n      var clipdiag = new go.Diagram();  // create a temporary Diagram\r\n      // recover the model from the clipboard rendering\r\n      clipdiag.model = go.Model.fromJson(clipstr);\r\n      // copy all the CLIPDIAG Parts into this Diagram\r\n      var all = new go.List().addAll(clipdiag.parts).addAll(clipdiag.nodes).addAll(clipdiag.links);\r\n      var copymap = this.diagram.copyParts(all, this.diagram, false);\r\n      // return a Set of the copied Parts\r\n      return new go.Set(/*go.Part*/).addAll(copymap.iteratorValues);\r\n    }\r\n  } catch (ex) {\r\n    // fallback implementation\r\n    return go.CommandHandler.prototype.pasteFromClipboard.call(this);\r\n  }\r\n};\r\n\r\n/**\r\n* @this {LocalStorageCommandHandler}\r\n* @param {Point?} pos\r\n* @return {boolean}\r\n*/\r\nLocalStorageCommandHandler.prototype.canPasteSelection = function(pos) {\r\n  var diagram = this.diagram;\r\n  if (diagram === null || diagram.isReadOnly || diagram.isModelReadOnly) return false;\r\n  if (!diagram.allowInsert || !diagram.allowClipboard) return false;\r\n  try {\r\n    var clipstr = window.localStorage.getItem(this.StorageKey);\r\n    var clipfrmt = window.localStorage.getItem(this.FormatKey);\r\n    if (clipstr === null || clipstr === \"\") return false;\r\n    if (clipfrmt !== diagram.model.dataFormat) return false;\r\n    return true;\r\n  } catch (ex) {\r\n    // fallback implementation\r\n    return go.CommandHandler.prototype.canPasteSelection(pos);\r\n  }\r\n};\r\n\r\nexport default LocalStorageCommandHandler;"],"sourceRoot":""}